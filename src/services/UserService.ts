/**
* Generated by unionj-generator.
* Don't edit!
*
* @module 用户管理模块
*/
import BizService from "./BizService";
import type {
  UserPageReqVO,
  ResultVOUserDetailVO,
  ResultVOString,
  ResultVOPageResultVOUserDetailVO,
  ResultVOUserRegisterRespVO,
} from "./types"

export class UserService extends BizService{

  constructor(axios: any) {
    super(axios);
  }

  /**
  * GET /api/user/avatar
  *
  * 用户头像下载接口
  * @param id 用户ID
  * @returns Promise<any> 
  */
  getApiUserAvatar(
      id: string,
  ) :Promise<any> {
    let client = this.axios.get
    if(this.axios.$get) {
      client = this.axios.$get
    }
    return client(this.addPrefix(`/api/user/avatar`),
          {
            params: {
              id,
            },
            responseType: 'blob',
          }
        )
  }

  /**
  * GET /api/user/detail
  *
  * 用户信息查询接口
  * @param id 用户ID
  * @returns Promise<ResultVOUserDetailVO> 
  */
  getApiUserDetail(
      id: string,
  ) :Promise<ResultVOUserDetailVO> {
    let client = this.axios.get
    if(this.axios.$get) {
      client = this.axios.$get
    }
    return client(this.addPrefix(`/api/user/detail`),
          {
            params: {
              id,
            },
          }
        )
  }

  /**
  * POST /api/user/edit
  *
  * 用户信息编辑接口
  * @param formData 
  * @param id 用户ID
  * @returns Promise<ResultVOString> 
  */
  postApiUserEdit(
    formData: FormData,
      id: string,
  ) :Promise<ResultVOString> {
    let client = this.axios.post
    if(this.axios.$post) {
      client = this.axios.$post
    }
    return client(this.addPrefix(`/api/user/edit`),
          formData,
          {
            params: {
              id,
            },
          }
        )
  }

  /**
  * POST /api/user/page
  *
  * 用户分页列表接口
  * @param payload 
  * @returns Promise<ResultVOPageResultVOUserDetailVO> 
  */
  postApiUserPage(
    payload: UserPageReqVO,
  ) :Promise<ResultVOPageResultVOUserDetailVO> {
    let client = this.axios.post
    if(this.axios.$post) {
      client = this.axios.$post
    }
    return client(this.addPrefix(`/api/user/page`),
          payload,
        )
  }

  /**
  * POST /api/user/register
  *
  * 用户注册接口
  * @param formData 
  * @returns Promise<ResultVOUserRegisterRespVO> 
  */
  postApiUserRegister(
    formData: FormData,
  ) :Promise<ResultVOUserRegisterRespVO> {
    let client = this.axios.post
    if(this.axios.$post) {
      client = this.axios.$post
    }
    return client(this.addPrefix(`/api/user/register`),
          formData,
        )
  }

}

export default UserService;

